/*
 * Copyright (c) 2014, Imagination Technologies LLC and Imagination
 * Technologies Limited.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted under the terms of the MIPS Free To Use 1.0
 * license that you will have received with this package. If you haven't
 * received this file, please contact Imagination Technologies or see the
 * following URL for details.
 * http://codescape-mips-sdk.imgtec.com/license/IMG-free-to-use-on-MIPS-license
 *
 */


/*
 * m32cache.sx: MIPS32 cache support functions
 */


/*
 * Note:	 pessimistic hazard timings assumed.
 */

#if defined(__mips_isa_rev) && __mips_isa_rev >= 6
#define L2_CM3 1
#else
#define L2_SCACHE 1
#endif

#include "m32cache.h"
#ifdef L2_CM3
#include <mips/m64r6cm3.h>
#endif

#if 1 /*#cache(m32)*/

#ifndef CSMIPS_CACHE_EXTRAROUTINES

/*
 * static void _size_cache()
 *
 * Internal routine to determine cache sizes by looking at config
 * registers.  Sizes are returned in registers, as follows:
 *
 * Do not use tmp3 (reg a1) in this function.
 */
SLEAF(_size_cache)
	# Read $config,0 to check presence of $config,1
	mfc0	cfg,$config,0

	# Clear temporaries
	li	icachesize,0
	li	ilinesize,0
	li	dcachesize,0
	li	dlinesize,0
	li	scachesize,0
	li	slinesize,0

	# Check if we have $config,1 register
	and	tmp,cfg,CFG0_M
	beqz	tmp,9f

	# Read $config,1
	mfc0	cfg,$config,1

	# Get I-cache line size
	and	tmp,cfg,CFG1_ILMASK
	srl	tmp,CFG1_ILSHIFT
	beqz	tmp,8f		# No I-cache

	# Get number of I-cache ways
	and	iways,cfg,CFG1_IAMASK
	srl	iways,CFG1_IASHIFT
	addu	iways,1
	move	icachesize,iways

	# Total icache size = lines/way * linesize * ways
	li	ilinesize,1
	addu	tmp,1
	sll	ilinesize,tmp
	sll	icachesize,tmp

	# Get I-cache lines per way
	and	tmp,cfg,CFG1_ISMASK
	srl	tmp,CFG1_ISSHIFT
	addu	tmp,6
	sll	icachesize,tmp

8:	# No I-cache, check for D-cache
	and	tmp,cfg,CFG1_DLMASK
	srl	tmp,CFG1_DLSHIFT
	beqz	tmp,8f		# No D-cache

	# Get number of dcache ways
	and	dways,cfg,CFG1_DAMASK
	srl	dways,CFG1_DASHIFT
	addu	dways,1
	move	dcachesize,dways

	# Total dcache size = lines/way * linesize * ways
	li	dlinesize,1
	addu	tmp,1
	sll	dlinesize,tmp
	sll	dcachesize,tmp

	# Get dcache lines per way
	and	tmp,cfg,CFG1_DSMASK
	srl	tmp,CFG1_DSSHIFT
	addu	tmp,6
	sll	dcachesize,tmp

8:	# No D-cache, check for L2 cache
#ifdef L2_SCACHE
	and	tmp,cfg,CFG0_M
	mfc0	cfg,$config,2
	beqz	tmp,9f

	/* get scache line size (log2) */
	and	tmp,cfg,CFG2_SLMASK
	srl	tmp,CFG2_SLSHIFT
	beqz	tmp,9f		# no s-cache
	addu	tmp,1

	/* get number of scache ways */
	and	sways,cfg,CFG2_SAMASK
	srl	sways,CFG2_SASHIFT
	addu	sways,1
	move	scachesize,sways

	/* scache size = lines/way * linesize * ways */
	li	slinesize,1
	sll	slinesize,tmp
	sll	scachesize,tmp

	/* get scache lines per way */
	and	tmp,cfg,CFG2_SSMASK
	srl	tmp,CFG2_SSSHIFT
	addu	tmp,6
	sll	scachesize,tmp
#else
#if defined(L2_CM3)
	# Check if we have $config,2 register present
	and	tmp,cfg,CFG1_M
	beqz	tmp,9f

	# Check if we have $config,3 register present
	mfc0	cfg,$config,2
	and	tmp,cfg,CFG2_M
	beqz	tmp,9f
	
	# Check if Coherency Manager memory-mapped 
	# Global Configuration Register Space is implemented.
	mfc0	tmp,$config,3
	and	tmp,CFG3_CMGCRMASK
	srl	tmp,CFG3_CMGCRSHIFT
	beqz	tmp,9f		# Return if not implemented

	# Read CMGCRBase to find CMGCR_BASE_ADDR
	PTR_MFC0 tmp,CMGCRBase
	sll	tmp,4
	lui	tmp1,0xb000	# Make it virtual
	or	tmp,tmp1

	# Read GCR_L2_CONFIG
	PTR_L	tmp1,GCR_L2_CONFIG(tmp)

	ext	slinesize, tmp1, 8, 4		# Extract line size
	li	tmp2, 2
	sllv	slinesize, tmp2, slinesize	# Now have true L2 line size in bytes
	ext	sways, tmp1, 12, 4		# Extract sets/way
	li	tmp2, 64
	sllv	sways, tmp2, sways		# Now we have true L2 sets/way
	ext	tmp1, tmp1, 0, 8		# Extract L2 associativity
	addiu	tmp1, tmp1, 1
	mul	tmp1, tmp1, sways		# Get total number of sets
	mul	scachesize, slinesize, tmp1	# L2 cache size
#else
#error "Unknown L2 implementation"
#endif
#endif



9:	# Return
	jr	ra
SEND(_size_cache)

/*
 * void size_cache()
 *
 * Work out size of I, D & S caches (assume already initialised)
 */
LEAF(m32_size_cache)
	lw	t0,mips_icache_size
	move	tmp3,ra
	bgtz	t0,8f				# already known?

	bal	_size_cache
	move	ra,tmp3

..savesize:
	sw	icachesize,mips_icache_size
	sw	dcachesize,mips_dcache_size
	sw	scachesize,mips_scache_size
	sw	ilinesize,mips_icache_linesize
	sw	dlinesize,mips_dcache_linesize
	sw	slinesize,mips_scache_linesize
	sw	iways,mips_icache_ways
	sw	dways,mips_dcache_ways
	sw	sways,mips_scache_ways

8:	# Return
	jr	ra
END(m32_size_cache)


/*
 * void m32_init_cache()
 *
 * Work out size of and initialize I, D & S caches.
 *
 * NOTES
 *  1) assumes enough DRAM has been initialised with correct parity
 */
LEAF(m32_init_cache)
	/*
 	 * Determine the cache sizes
	 */
	move	tmp3,ra
	bal	_size_cache

	/* now run uncached (PIC) */
	.set	noreorder
	.set	nomacro
	bal	1f
	li	t1,KSEG1_BASE
1:	or	t1,ra
	PTR_ADDU t1,20
	move	ra,tmp3
	jr	t1
	nop
	.set	macro
	.set	reorder


	#
	# The caches may be in an indeterminate state,
	# so we force good parity into them by doing an
	# invalidate, load/fill, invalidate for each line.
	#

	# Disable all i/u and cache exceptions
	.set noreorder
	mfc0	t1,$sr
	li	t0,~SR_IE
	and	t0,t1
	or	t0,SR_ERL		# will this work?
	mtc0	t0,$sr
#if __mips_isa_rev < 2
	ssnop; ssnop
#endif
	ehb
#ifdef L2_CM3
	.set reorder

	#
	# Initialise secondary cache
	#

	# Read CMGCRBase to find CMGCR_BASE_ADDR
	PTR_MFC0 tmp,CMGCRBase
	sll	tmp,4
	lui	tmp1,0xb000	# Make it virtual
	or	tmp,tmp1

	# Read GCR_L2_CONFIG and check L2 size
	PTR_L	tmp1,GCR_L2_CONFIG(tmp)

	# Read L2 Line Size
	ext	tmp2, tmp1, 11, 4

	# Check if there is L2
	beqz	tmp2, 9f

	li	tmp3, 2
	sllv	tmp2, tmp3, tmp2

	# Read L2 Sets per Way
	ext	tmp4, tmp1, 12, 4
	li	tmp3, 64
	sllv	tmp4, tmp3, tmp4

	# Read L2 Associativity
	ext	tmp5, tmp1, 0, 8
	addu	tmp5, 1
	mul	tmp4, tmp4, tmp5
	lui	tmp3, 0x8000

	# Clear GCR Tag/Data registers
	PTR_S	zero, GCR_TAG_ADDR(tmp)
	PTR_S	zero, GCR_TAG_STATE(tmp)
	PTR_S	zero, GCR_TAG_DATA(tmp)
	li	tmp5, 0xfcffffff
	and	tmp1, tmp5			# clear bits 25:24 to make sure ECC is calculated by HW
	li	tmp5, 0x04000000
	or	tmp1, tmp5			# set bit 26 of GCR_L2_CONFIG to make sure LRU is written
	PTR_S	tmp1, GCR_L2_CONFIG(tmp)
	sync

	# L2 Index Store Tag Cache Op
	# Will invalidate the tag entry
1:	cache	Index_Store_Tag_S, 0(tmp3)
	addu	tmp4, -1
	add	tmp3, tmp2
	bnez	tmp4, 1b
	# End of L2 init

9:
#endif


	mtc0	zero,$errctl
	mtc0	zero,$taglo		# 4K taglo / 2*K itaglo
	mtc0	zero,$taghi		# 4K taghi / 2*K itaghi
	mtc0	zero,$taglo,2		# 2*K dtaglo
	mtc0	zero,$taghi,2		# 2*K dtaghi
#ifdef L2_SCACHE
	mtc0	zero,$taglo,4		# 25Kf L23taglo
	mtc0	zero,$taghi,4		# 25Kf L23taghi
#endif
	ehb

	.set reorder

4:
	#
	# Assume bottom of RAM or scache will generate good parity for the
	# primary caches (max 32K)
	#

	# Initialise primary instruction cache.
	.set	noreorder
	li	a0,KSEG0_BASE
	addu	a1,a0,icachesize		# limit = base + icachesize
	beqz	icachesize,8f
	nop
1:	addu	a0,ilinesize
	cache	Index_Store_Tag_I,-4(a0)	# BDSLOT: clear tag
	bne	a0,a1,1b
	nop
	.set	reorder

	# Initialise primary data cache.

	.set	noreorder
8:	li	a0,KSEG0_BASE
	addu	a1,a0,dcachesize        	# limit = base + dcachesize
	beqz	dcachesize,8f
	nop
1:	addu	a0,dlinesize
	cache	Index_Store_Tag_D,-4(a0)	# BDSLOT: clear tag
	bne	a0,a1,1b
	nop
	.set	reorder

#ifdef L2_SCACHE
	/*
	 * Initialise secondary cache.
	 */

	.set	noreorder
8:	li	a0,KSEG0_BASE
	beqz	scachesize,8f
	addu	a1,a0,scachesize        	# limit = base + scachesize
1:	addu	a0,slinesize
	bne	a0,a1,1b
	cache	Index_Store_Tag_S,-4(a0)	# BDSLOT: clear tag
	.set	reorder

#endif
8:	sync

	# We store the sizes only after the caches are initialised
4:	sw	icachesize,mips_icache_size
	sw	dcachesize,mips_dcache_size
	sw	scachesize,mips_scache_size
	sw	ilinesize,mips_icache_linesize
	sw	dlinesize,mips_dcache_linesize
	sw	slinesize,mips_scache_linesize
	sw	iways,mips_icache_ways
	sw	dways,mips_dcache_ways
	sw	sways,mips_scache_ways

	.set	noreorder
	mtc0	t1,$sr
#if __mips_isa_rev < 2
	ssnop; ssnop
#endif
	ehb
	.set	reorder

	jr.hb	ra
END(m32_init_cache)




/*
 * void m32_clean_icache (unsigned kva, size_t n)
 *
 * Writeback and invalidate address range in instruction caches
 */
LEAF(m32_clean_icache)
	SIZE_CACHE(a2,mips_icache_linesize)
	vcacheop(a0,a1,a2,Hit_Invalidate_I)

9:	lw	a2,mips_scache_linesize
	blez	a2,9f
	vcacheop(a0,a1,a2,Hit_Writeback_Inv_S)
	sync

9:	jr.hb	ra
END(m32_clean_icache)

#endif /* !CSMIPS_CACHE_EXTRAROUTINES */

#endif /* #cache(m32) */
